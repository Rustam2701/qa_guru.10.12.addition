{"name": "Registration form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#react-select-2-option-0')).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <div class=\"subjects-auto-complete__option subjects-auto-complete__option--is-focused css-1n7v3ny-option\" id=\"react-select-2-option-0\" tabindex=\"-1\">...</div> is not clickable at point (1064, 841). Other element would receive the click: <div>...</div>\n  (Session info: chrome=100.0.4896.60)\nScreenshot: file:///Users/bella/.selene/screenshots/1708118286509/1708118286509.png\nPageSource: file:///Users/bella/.selene/screenshots/1708118286509/1708118286509.html", "trace": "fn = <selene.core.wait.Command object at 0x10403a940>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n.venv/lib/python3.9/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.9/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n.venv/lib/python3.9/site-packages/selene/core/entity.py:525: in raw_click\n    element.locate().click()\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1040378e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x563cc6673b08 \\\\u003Cunknown>\\\\n#21 0x563cc668d5dd \\\\u003Cunknown>\\\\n#22 0x7fd58484d609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"subjects-auto-complete__option subjects-auto-complete__option--is-focused css-1n7v3ny-option\" id=\"react-select-2-option-0\" tabindex=\"-1\">...</div> is not clickable at point (1064, 841). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x563cc6610013 <unknown>\nE       #1 0x563cc6372a08 <unknown>\nE       #2 0x563cc63b05a1 <unknown>\nE       #3 0x563cc63ae188 <unknown>\nE       #4 0x563cc63ab824 <unknown>\nE       #5 0x563cc63aa5c2 <unknown>\nE       #6 0x563cc639de19 <unknown>\nE       #7 0x563cc63c6932 <unknown>\nE       #8 0x563cc639d6d3 <unknown>\nE       #9 0x563cc63c6a3e <unknown>\nE       #10 0x563cc63d9b94 <unknown>\nE       #11 0x563cc63c6823 <unknown>\nE       #12 0x563cc639c08a <unknown>\nE       #13 0x563cc639d1e5 <unknown>\nE       #14 0x563cc663de5d <unknown>\nE       #15 0x563cc6657061 <unknown>\nE       #16 0x563cc663fbb5 <unknown>\nE       #17 0x563cc6657e08 <unknown>\nE       #18 0x563cc66332f0 <unknown>\nE       #19 0x563cc6673988 <unknown>\nE       #20 0x563cc6673b08 <unknown>\nE       #21 0x563cc668d5dd <unknown>\nE       #22 0x7fd58484d609 <unknown>\n\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title(\"Registration form\")\n    def test_for_demoqa():\n        with allure.step('Open form'):\n            browser.open('https://demoqa.com/automation-practice-form')\n            browser.element('[aria-label=\"Consent\"]').click()\n    \n        with allure.step('Fill form user data'):\n            browser.element('#firstName').type('Светлана')\n            browser.element('#lastName').type('Федоровна')\n            browser.element('#userEmail').type('bethere@example.com')\n            browser.element('[for=gender-radio-2]').click()\n            browser.element('#userNumber').type('7909555678')\n            browser.element('#dateOfBirthInput').click()\n            browser.element('.react-datepicker__year-select').click().element(by.text('1993')).click()\n            browser.element('.react-datepicker__month-select').click().element(by.text('May')).click()\n            browser.element('.react-datepicker__day--022').click()\n            browser.element('#subjectsInput').should(be.blank).type('english')\n>           browser.element('#react-select-2-option-0').click()\n\ntests/demoqa/test_registration_form.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.9/site-packages/selene/core/entity.py:529: in click\n    self.wait.for_(\n.venv/lib/python3.9/site-packages/selene/core/wait.py:142: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x10403a940>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#react-select-2-option-0')).click\nE                   \nE                   Reason: ElementClickInterceptedException: element click intercepted: Element <div class=\"subjects-auto-complete__option subjects-auto-complete__option--is-focused css-1n7v3ny-option\" id=\"react-select-2-option-0\" tabindex=\"-1\">...</div> is not clickable at point (1064, 841). Other element would receive the click: <div>...</div>\nE                     (Session info: chrome=100.0.4896.60)\nE                   Screenshot: file:///Users/bella/.selene/screenshots/1708118286509/1708118286509.png\nE                   PageSource: file:///Users/bella/.selene/screenshots/1708118286509/1708118286509.html\n\n.venv/lib/python3.9/site-packages/selene/core/wait.py:140: TimeoutException"}, "steps": [{"name": "Open form", "status": "passed", "start": 1708118293235, "stop": 1708118295737}, {"name": "Fill form user data", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#react-select-2-option-0')).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <div class=\"subjects-auto-complete__option subjects-auto-complete__option--is-focused css-1n7v3ny-option\" id=\"react-select-2-option-0\" tabindex=\"-1\">...</div> is not clickable at point (1064, 841). Other element would receive the click: <div>...</div>\n  (Session info: chrome=100.0.4896.60)\nScreenshot: file:///Users/bella/.selene/screenshots/1708118286509/1708118286509.png\nPageSource: file:///Users/bella/.selene/screenshots/1708118286509/1708118286509.html\n\n", "trace": "  File \"/Users/bella/projects/qa_guru.10.12.addition/tests/demoqa/test_registration_form.py\", line 23, in test_for_demoqa\n    browser.element('#react-select-2-option-0').click()\n  File \"/Users/bella/projects/qa_guru.10.12.addition/.venv/lib/python3.9/site-packages/selene/core/entity.py\", line 529, in click\n    self.wait.for_(\n  File \"/Users/bella/projects/qa_guru.10.12.addition/.venv/lib/python3.9/site-packages/selene/core/wait.py\", line 142, in for_\n    return self._decorator(self)(logic)(fn)\n  File \"/Users/bella/projects/qa_guru.10.12.addition/.venv/lib/python3.9/site-packages/selene/core/wait.py\", line 140, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1708118295737, "stop": 1708118306002}], "start": 1708118293234, "stop": 1708118306005, "uuid": "8f9811c0-2d5a-4241-acfe-d123b0218ecf", "historyId": "bea1a3e80dc9bd9609211643580d4775", "testCaseId": "bea1a3e80dc9bd9609211643580d4775", "fullName": "tests.demoqa.test_registration_form#test_for_demoqa", "labels": [{"name": "parentSuite", "value": "tests.demoqa"}, {"name": "suite", "value": "test_registration_form"}, {"name": "host", "value": "MacBook-Pro-Admin.local"}, {"name": "thread", "value": "78747-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.demoqa.test_registration_form"}]}